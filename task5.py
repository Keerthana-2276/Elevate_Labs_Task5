# -*- coding: utf-8 -*-
"""Task5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mLl8axY73IUAfTUZaxUqYgA1IEGn34hU
"""

# Step 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import seaborn as sns

# Step 2: Upload and Load the Dataset
from google.colab import files
uploaded = files.upload()  # Upload your 'heart_data.csv'

df = pd.read_csv(list(uploaded.keys())[0])  # Read the CSV file
print("First 5 rows:")
print(df.head())

# Step 3: Split Features and Target
X = df.drop('target', axis=1)
y = df['target']

# Step 4: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train a Decision Tree Classifier
dtree = DecisionTreeClassifier(random_state=42)
dtree.fit(X_train, y_train)

# Step 6: Visualize the Tree
plt.figure(figsize=(20,10))
plot_tree(dtree, feature_names=X.columns, class_names=["No Disease", "Disease"], filled=True)
plt.title("Decision Tree")
plt.show()

# Step 7: Evaluate Decision Tree
y_pred_dt = dtree.predict(X_test)
print("\nDecision Tree Accuracy:", accuracy_score(y_test, y_pred_dt))
print(classification_report(y_test, y_pred_dt))

# Step 8: Check Overfitting - Limit Tree Depth
dtree_limited = DecisionTreeClassifier(max_depth=3, random_state=42)
dtree_limited.fit(X_train, y_train)
y_pred_limited = dtree_limited.predict(X_test)
print("\nLimited Depth Decision Tree Accuracy:", accuracy_score(y_test, y_pred_limited))

# Step 9: Train a Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)
print("\nRandom Forest Accuracy:", accuracy_score(y_test, y_pred_rf))
print(classification_report(y_test, y_pred_rf))

# Step 10: Feature Importances
importances = pd.Series(rf.feature_importances_, index=X.columns)
importances.sort_values(ascending=False).plot(kind='bar', title='Feature Importances', figsize=(10,5))
plt.tight_layout()
plt.show()

# Step 11: Cross-Validation
cv_scores_dt = cross_val_score(dtree, X, y, cv=5)
cv_scores_rf = cross_val_score(rf, X, y, cv=5)
print("\nDecision Tree CV Accuracy:", np.mean(cv_scores_dt))
print("Random Forest CV Accuracy:", np.mean(cv_scores_rf))